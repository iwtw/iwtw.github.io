[{"title":"nodejs使用mysql模块","date":"2017-03-09T06:15:06.000Z","path":"2017/03/09/nodejs使用mysql模块/","text":"连接模块query.js12345678910111213141516171819202122232425262728var mysql = require(&apos;mysql&apos;);var pool = mysql.createPool(&#123; host :&apos;localhost&apos;, user :&apos;user&apos;, password:&apos;password&apos;, database:&apos;database&apos;&#125;);exports.query = function ( sql , callback)&#123; pool.getConnection( function ( err , connection)&#123; console.log(&apos;getConnection Done&apos;); if(err)&#123; console.log(err); return callback(err); &#125; console.log(&quot;Querying on DB&quot;); connection.query(sql , function (error, results, fields) &#123; connection.release(); if (error) &#123; console.log(err); return callback(err); &#125; if(results.length &gt; 0 )&#123; console.log( results[0] ); &#125; return callback(error,results); &#125;); &#125;);&#125;; connection.release()把连接放回pool中","tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"http://yoursite.com/tags/Nodejs/"},{"name":"Mysql","slug":"Mysql","permalink":"http://yoursite.com/tags/Mysql/"}]},{"title":"ejs模板使用笔记","date":"2017-03-09T05:47:43.000Z","path":"2017/03/09/ejs模板使用笔记/","text":"&lt;% %&gt;被&lt;% %&gt;括住的内容会被ejs compiler当成javascript语句执行。使得我们可以在.ejs中使用javascript那为什么我们不直接使用 &lt;script&gt;标签呢？实际上它们存在区别，&lt;script&gt;中的内容本质还是你的html，也就是你点开页面view source能直接看到代码；相反，&lt;% %&gt;括住的内容是不会被转义成html的，它们的功能应该是辅助你书写ejs。在&lt;script&gt;中使用&lt;% %&gt;时需要注意这点。 &lt;%= %&gt; 被&lt;%= %&gt;括住的变量会被ejs转义成变量的值输出到html中。应当注意&lt;%= %&gt;不在&lt;% %&gt;中被使用 demo这是我在做一个经纬度标记到高德地图上所使用的ejs代码12345678910111213141516171819 &lt;script type=&quot;text/javascript&quot;&gt;pos = [ &lt;%=results[0].Longitude%&gt; , &lt;%=results[0].Latitude%&gt;]; var map = new AMap.Map(&apos;container&apos;,&#123; resizeEnable: true, zoom: 10, center: pos &#125;); var marker = [] ; if( !&lt;%=empty%&gt;)&#123; &lt;% for( var i = 0 ; i &lt; results.length ; i ++ )&#123;%&gt; marker[&lt;%=i%&gt;] = new AMap.Marker(&#123; icon: &quot;http://webapi.amap.com/theme/v1.3/markers/n/mark_b.png&quot;, position: [ &lt;%=results[i].Longitude%&gt; , &lt;%=results[i].Latitude%&gt; ] &#125;); marker[&lt;%=i%&gt;].setMap(map); &lt;%;&#125;%&gt; &#125; &lt;/script&gt; 用浏览器打开view source，得到的结果是1234567891011121314151617181920212223242526272829303132 &lt;script type=&quot;text/javascript&quot;&gt; pos = [ 103.89472166666667 , 30.97911]; var map = new AMap.Map(&apos;container&apos;,&#123; resizeEnable: true, zoom: 10, center: pos &#125;); var marker = [] ; if( !false)&#123; marker[0] = new AMap.Marker(&#123; icon: &quot;http://webapi.amap.com/theme/v1.3/markers/n/mark_b.png&quot;, position: [ 103.89472166666667 , 30.97911 ] &#125;); marker[0].setMap(map); marker[1] = new AMap.Marker(&#123; icon: &quot;http://webapi.amap.com/theme/v1.3/markers/n/mark_b.png&quot;, position: [ 103.89472166666667 , 30.97911 ] &#125;); marker[1].setMap(map); marker[2] = new AMap.Marker(&#123; icon: &quot;http://webapi.amap.com/theme/v1.3/markers/n/mark_b.png&quot;, position: [ 103.89463833333333 , 30.9795 ] &#125;); marker[2].setMap(map); .....省略.....&#125;&lt;/script&gt;","tags":[{"name":"Ejs","slug":"Ejs","permalink":"http://yoursite.com/tags/Ejs/"},{"name":"Nodejs","slug":"Nodejs","permalink":"http://yoursite.com/tags/Nodejs/"},{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"}]},{"title":"Linear Regression","date":"2017-03-01T08:55:00.000Z","path":"2017/03/01/Linear-Regression/","text":"目的对于给定的训练集合(training set) x 和 y ， 其中x为m * n 的矩阵 ， y 为 m行的列向量，也就是有m个训练样本(samples) ， 每个样本有 n 个features ，我们希望能学习训练集合从而如果有一个新的输入数据 x ， 我们能预测与它对应的y的值。以房屋价格为例 ， 假设我们有 m个房屋数据，每间住房包括“住房面积”和“房间个数”作为features (此时n=2), 现在给定一间 面积为100，2间房的房屋，希望预测房屋价格 模型$$h_{\\theta}(X) = \\theta ^TX = \\theta_0 + \\theta_1x_1 + … + \\theta_nx_n$$上式中的$x$为 n*1的列向量 ，$X = [1 ; x]$ ，添加了截距项(intercept term).所以我们需要根据训练样本找到最适合的$\\theta$ Cost Function$$J(\\theta) = \\frac{1}{2}\\sum{i=1}^{n}(h\\theta(x^{(i)})-y^{(i)})^2 $$其中$x^{(i)}$ ， $y^{(i)}$为第i组样本这实际上是一个ordinary least square model Compute $\\theta$目的是找到最小化$J$的$\\theta$由于$J(\\theta$)是一个凸函数使用的方法可以是gradient descent 或者 Newton-Rhaphson’s method 。得到确定的$\\theta$以后我们就可以根据输入预测了","tags":[{"name":"Machine Leanrning","slug":"Machine-Leanrning","permalink":"http://yoursite.com/tags/Machine-Leanrning/"},{"name":"Linear Regression","slug":"Linear-Regression","permalink":"http://yoursite.com/tags/Linear-Regression/"}]},{"title":"github搭建hexo","date":"2017-01-12T15:05:55.000Z","path":"2017/01/12/github搭建hexo/","text":"这次终于弄好了个人博客，以后就可以常驻这里了，专门为了一个个人博客申请一个云服务器实在是没有必要，下面简单介绍一下在github上搭建hexo博客的经验 环境123node.jshexogit 其中node.js和git就不说了，hexo的安装1$sudo npm install hexo -g Getting started1234567$mkdir hexoblog$cd hexoblog$hexo init$npm install$git init$git config user.name &quot;your github username&quot;$git config user.email &quot;your github email&quot; 修改hexoblog\\_config.yml中的deploy为1234deploy: type: git repo:https://github.com/&lt;username&gt;/&lt;username&gt;.github.io branch:master 需要说明的有 1 github的&lt;username&gt;.github.io是默认为个人网站的，这个仓库中的文件将被当作个人网站解析，详见Github Page2 在hexo 3.0以后 type设置为git，之前的版本 type设置为github 本地测试12$hexo g #hexo generate$hexo s #hexo server &nbsp;然后访问localhost:4000，可以看到个人博客的首页了 发布到github先要安装hexo-deployer-git1$npm install hexo-deployer-git --save 发布命令：1$hexo d #hexo deploy 对应之前我们在_config.yml配置文件中修改的deploy配置，将本地文件发布到相应的仓库，所以以后每次在本地文件作出修改后的发布就是：123$hexo clean$hexo g$hexo d 使用yilia theme这个主题简洁，颜值高，移动端的支持好yilia的安装 为了让yilia的标签功能使用正常，还需要进行一些配置：首先安装hexo-generator-json-content1$npm install hexo-generator-json-content 然后修改hexoblog\\_config.yml，添加：123456789101112131415161718jsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 发布一篇post1$hexo new &quot;&lt;post name&gt;&quot; 然后修改hexoblog\\source\\_post\\&lt;post name&gt;.md用markdown写博文吧:D其中1 标签设置：tags:[tag1,tag2]2 &lt;!--more--&gt;标签以后的内容在“展开全文”以后才显示","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}]